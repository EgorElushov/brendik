import logging
import json
import os
import random
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
API_TOKEN = "8138806291:AAE4PYZjKkBd4La8DSjfmqL8mg1JrnU1APM"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω –æ—Ç BotFather
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
KEYWORDS_FILE = "keywords.json"
DEFAULT_REACTION = "‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ!"

# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
default_data = {
    "admins": [],  # –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    "keywords": {},  # –°–ª–æ–≤–∞—Ä—å –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤, –∏—Ö —Ä–µ–∞–∫—Ü–∏–π –∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
    "default_reaction": DEFAULT_REACTION,  # –†–µ–∞–∫—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –Ω–æ–≤—ã—Ö —Å–ª–æ–≤
    "default_probability": 100  # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–µ–∞–∫—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)
}

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –∏–º–µ–Ω–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
ADMINS_FILE = "admins.json"

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
def load_admins():
    if os.path.exists(ADMINS_FILE):
        with open(ADMINS_FILE, "r", encoding="utf-8") as file:
            try:
                return json.load(file)
            except json.JSONDecodeError:
                return []
    else:
        return []

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞
def load_data():
    if os.path.exists(KEYWORDS_FILE):
        with open(KEYWORDS_FILE, "r", encoding="utf-8") as file:
            try:
                return json.load(file)
            except json.JSONDecodeError:
                return default_data.copy()
    else:
        return default_data.copy()

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
def save_data(data):
    with open(KEYWORDS_FILE, "w", encoding="utf-8") as file:
        json.dump(data, file, ensure_ascii=False, indent=4)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM (–∫–æ–Ω–µ—á–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞)
class Form(StatesGroup):
    add_keyword = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
    add_keyword_reaction = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∞–∫—Ü–∏–∏ –¥–ª—è —Å–ª–æ–≤–∞
    add_keyword_probability = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–ª–æ–≤–∞
    remove_keyword = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
    set_reaction = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ–∞–∫—Ü–∏–∏ –¥–ª—è —Å–ª–æ–≤–∞
    set_probability = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–ª–æ–≤–∞
    select_keyword_for_reaction = State()  # –í—ã–±–æ—Ä —Å–ª–æ–≤–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∞–∫—Ü–∏–∏
    select_keyword_for_probability = State()  # –í—ã–±–æ—Ä —Å–ª–æ–≤–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
    set_default_reaction = State()  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∞–∫—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    set_default_probability = State()  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    add_admin = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def is_admin(message):
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    username = message.from_user.username
    
    # –ï—Å–ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –∑–∞–¥–∞–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º ID –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
    if not username:
        username = str(message.from_user.id)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
    admins_from_file = load_admins()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
    if username in admins_from_file:
        return True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    data = load_data()
    
    # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø—É—Å—Ç, –ø–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not data["admins"]:
        data["admins"].append(username)
        save_data(data)
        return True
        
    return username in data["admins"]

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ —á–∞—Ç–µ.\n\n"
        "–ï—Å–ª–∏ –≤—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/add_keyword - –î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ\n"
        "/remove_keyword - –£–¥–∞–ª–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ\n"
        "/list_keywords - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤\n"
        "/set_reaction - –ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–ª–æ–≤–∞\n"
        "/set_probability - –ò–∑–º–µ–Ω–∏—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–µ–∞–∫—Ü–∏–∏ –¥–ª—è —Å–ª–æ–≤–∞\n"
        "/set_default - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é\n"
        "/set_default_prob - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é\n"
        "/add_admin - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@dp.message_handler(commands=["help"])
async def cmd_help(message: types.Message):
    await message.answer(
        "üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:\n\n"
        "/add_keyword - –î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ\n"
        "/remove_keyword - –£–¥–∞–ª–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ\n"
        "/list_keywords - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤\n"
        "/set_reaction - –ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–ª–æ–≤–∞\n"
        "/set_probability - –ò–∑–º–µ–Ω–∏—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–µ–∞–∫—Ü–∏–∏ –¥–ª—è —Å–ª–æ–≤–∞\n"
        "/set_default - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é\n"
        "/set_default_prob - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é\n"
        "/add_admin - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add_keyword
@dp.message_handler(commands=["add_keyword"])
async def cmd_add_keyword(message: types.Message):
    if not is_admin(message):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    await Form.add_keyword.set()
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
@dp.message_handler(state=Form.add_keyword)
async def process_add_keyword(message: types.Message, state: FSMContext):
    keyword = message.text.lower().strip()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
    await state.update_data(keyword=keyword)
    
    data = load_data()
    if keyword in data["keywords"]:
        await message.answer(f"‚ö†Ô∏è –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ '{keyword}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        await state.finish()
    else:
        await Form.add_keyword_reaction.set()
        await message.answer(f"üìù –í–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–∫—Ü–∏—é –¥–ª—è –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ '{keyword}':")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ä–µ–∞–∫—Ü–∏–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
@dp.message_handler(state=Form.add_keyword_reaction)
async def process_add_keyword_reaction(message: types.Message, state: FSMContext):
    reaction = message.text
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    keyword = user_data["keyword"]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∞–∫—Ü–∏—é –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
    await state.update_data(reaction=reaction)
    
    await Form.add_keyword_probability.set()
    await message.answer(
        f"üìä –í–≤–µ–¥–∏—Ç–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–µ–∞–∫—Ü–∏–∏ –¥–ª—è –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ '{keyword}' (–æ—Ç 1 –¥–æ 100 –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤):"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
@dp.message_handler(state=Form.add_keyword_probability)
async def process_add_keyword_probability(message: types.Message, state: FSMContext):
    try:
        probability = int(message.text.strip())
        if probability < 1 or probability > 100:
            await message.answer("‚ö†Ô∏è –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 100 –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        user_data = await state.get_data()
        keyword = user_data["keyword"]
        reaction = user_data["reaction"]
        
        data = load_data()
        data["keywords"][keyword] = {
            "reaction": reaction,
            "probability": probability
        }
        save_data(data)
        
        await message.answer(
            f"‚úÖ –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ '{keyword}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ:\n"
            f"‚Ä¢ –†–µ–∞–∫—Ü–∏—è: {reaction}\n"
            f"‚Ä¢ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {probability}%"
        )
        await state.finish()
    except ValueError:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /remove_keyword
@dp.message_handler(commands=["remove_keyword"])
async def cmd_remove_keyword(message: types.Message):
    if not is_admin(message):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    data = load_data()
    if not data["keywords"]:
        await message.answer("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –ø—É—Å—Ç.")
        return
    
    await Form.remove_keyword.set()
    
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for keyword in data["keywords"]:
        keyboard.add(keyword)
    keyboard.add("–û—Ç–º–µ–Ω–∞")
    
    await message.answer("üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
@dp.message_handler(state=Form.remove_keyword)
async def process_remove_keyword(message: types.Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await message.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=types.ReplyKeyboardRemove())
        await state.finish()
        return
    
    keyword = message.text.lower().strip()
    data = load_data()
    
    if keyword in data["keywords"]:
        del data["keywords"][keyword]
        save_data(data)
        await message.answer(f"‚úÖ –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ '{keyword}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.", 
                            reply_markup=types.ReplyKeyboardRemove())
    else:
        await message.answer(f"‚ö†Ô∏è –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ '{keyword}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", 
                            reply_markup=types.ReplyKeyboardRemove())
    
    await state.finish()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list_keywords
@dp.message_handler(commands=["list_keywords"])
async def cmd_list_keywords(message: types.Message):
    if not is_admin(message):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    data = load_data()
    if not data["keywords"]:
        await message.answer("üìã –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –ø—É—Å—Ç.")
    else:
        keywords_text = []
        for keyword, info in data["keywords"].items():
            if isinstance(info, dict):
                reaction = info.get("reaction", "–ù–µ –∑–∞–¥–∞–Ω–∞")
                probability = info.get("probability", 100)
                keywords_text.append(f"‚Ä¢ {keyword}: {reaction} (–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {probability}%)")
            else:
                # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º
                keywords_text.append(f"‚Ä¢ {keyword}: {info} (–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: 100%)")
        
        default_reaction = data.get("default_reaction", DEFAULT_REACTION)
        default_probability = data.get("default_probability", 100)
        
        await message.answer(
            f"üìã –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏ –∏—Ö —Ä–µ–∞–∫—Ü–∏–π:\n\n"
            f"{chr(10).join(keywords_text)}\n\n"
            f"–†–µ–∞–∫—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {default_reaction}\n"
            f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {default_probability}%"
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /set_reaction
@dp.message_handler(commands=["set_reaction"])
async def cmd_set_reaction(message: types.Message):
    if not is_admin(message):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    data = load_data()
    if not data["keywords"]:
        await message.answer("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –ø—É—Å—Ç. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞.")
        return
    
    await Form.select_keyword_for_reaction.set()
    
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for keyword in data["keywords"]:
        keyboard.add(keyword)
    keyboard.add("–û—Ç–º–µ–Ω–∞")
    
    await message.answer("üìù –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é:", 
                        reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∞–∫—Ü–∏–∏
@dp.message_handler(state=Form.select_keyword_for_reaction)
async def process_select_keyword(message: types.Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await message.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=types.ReplyKeyboardRemove())
        await state.finish()
        return
    
    keyword = message.text.lower().strip()
    data = load_data()
    
    if keyword in data["keywords"]:
        if isinstance(data["keywords"][keyword], dict):
            current_reaction = data["keywords"][keyword].get("reaction", "–ù–µ –∑–∞–¥–∞–Ω–∞")
        else:
            # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º
            current_reaction = data["keywords"][keyword]
            
        await state.update_data(keyword=keyword)
        await Form.set_reaction.set()
        await message.answer(f"üìù –¢–µ–∫—É—â–∞—è —Ä–µ–∞–∫—Ü–∏—è –¥–ª—è '{keyword}': {current_reaction}\n\n"
                            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ä–µ–∞–∫—Ü–∏—é:", reply_markup=types.ReplyKeyboardRemove())
    else:
        await message.answer(f"‚ö†Ô∏è –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ '{keyword}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", 
                            reply_markup=types.ReplyKeyboardRemove())
        await state.finish()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–æ–≤–æ–π —Ä–µ–∞–∫—Ü–∏–∏ –¥–ª—è –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
@dp.message_handler(state=Form.set_reaction)
async def process_set_reaction(message: types.Message, state: FSMContext):
    new_reaction = message.text
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    keyword = user_data["keyword"]
    
    data = load_data()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ
    if isinstance(data["keywords"].get(keyword), dict):
        data["keywords"][keyword]["reaction"] = new_reaction
    else:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
        old_reaction = data["keywords"].get(keyword, "")
        data["keywords"][keyword] = {
            "reaction": new_reaction,
            "probability": 100  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 100%
        }
    
    save_data(data)
    
    await message.answer(f"‚úÖ –†–µ–∞–∫—Ü–∏—è –¥–ª—è –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ '{keyword}' —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {new_reaction}")
    await state.finish()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /set_probability
@dp.message_handler(commands=["set_probability"])
async def cmd_set_probability(message: types.Message):
    if not is_admin(message):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    data = load_data()
    if not data["keywords"]:
        await message.answer("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –ø—É—Å—Ç. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞.")
        return
    
    await Form.select_keyword_for_probability.set()
    
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for keyword in data["keywords"]:
        keyboard.add(keyword)
    keyboard.add("–û—Ç–º–µ–Ω–∞")
    
    await message.answer("üìù –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–µ–∞–∫—Ü–∏–∏:",
                        reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
@dp.message_handler(state=Form.select_keyword_for_probability)
async def process_select_keyword_for_probability(message: types.Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await message.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=types.ReplyKeyboardRemove())
        await state.finish()
        return
    
    keyword = message.text.lower().strip()
    data = load_data()
    
    if keyword in data["keywords"]:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
        if isinstance(data["keywords"][keyword], dict):
            current_probability = data["keywords"][keyword].get("probability", 100)
        else:
            # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            current_probability = 100
            
        await state.update_data(keyword=keyword)
        await Form.set_probability.set()
        await message.answer(f"üìä –¢–µ–∫—É—â–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–µ–∞–∫—Ü–∏–∏ –¥–ª—è '{keyword}': {current_probability}%\n\n"
                            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å (–æ—Ç 1 –¥–æ 100):",
                            reply_markup=types.ReplyKeyboardRemove())
    else:
        await message.answer(f"‚ö†Ô∏è –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ '{keyword}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                            reply_markup=types.ReplyKeyboardRemove())
        await state.finish()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–æ–≤–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
@dp.message_handler(state=Form.set_probability)
async def process_set_probability(message: types.Message, state: FSMContext):
    try:
        new_probability = int(message.text.strip())
        if new_probability < 1 or new_probability > 100:
            await message.answer("‚ö†Ô∏è –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 100 –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        user_data = await state.get_data()
        keyword = user_data["keyword"]
        
        data = load_data()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ
        if isinstance(data["keywords"].get(keyword), dict):
            data["keywords"][keyword]["probability"] = new_probability
        else:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
            old_reaction = data["keywords"].get(keyword, "")
            data["keywords"][keyword] = {
                "reaction": old_reaction,
                "probability": new_probability
            }
        
        save_data(data)
        
        await message.answer(f"‚úÖ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–µ–∞–∫—Ü–∏–∏ –¥–ª—è –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ '{keyword}' —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {new_probability}%")
        await state.finish()
    except ValueError:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /set_default
@dp.message_handler(commands=["set_default"])
async def cmd_set_default_reaction(message: types.Message):
    if not is_admin(message):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    await Form.set_default_reaction.set()
    
    data = load_data()
    current_default = data.get("default_reaction", DEFAULT_REACTION)
    
    await message.answer(f"üìù –¢–µ–∫—É—â–∞—è —Ä–µ–∞–∫—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {current_default}\n\n"
                        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ä–µ–∞–∫—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–æ–≤–æ–π —Ä–µ–∞–∫—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
@dp.message_handler(state=Form.set_default_reaction)
async def process_set_default_reaction(message: types.Message, state: FSMContext):
    new_default = message.text
    
    data = load_data()
    data["default_reaction"] = new_default
    save_data(data)
    
    await message.answer(f"‚úÖ –†–µ–∞–∫—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {new_default}")
    await state.finish()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /set_default_prob
@dp.message_handler(commands=["set_default_prob"])
async def cmd_set_default_probability(message: types.Message):
    if not is_admin(message):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    await Form.set_default_probability.set()
    
    data = load_data()
    current_default_prob = data.get("default_probability", 100)
    
    await message.answer(f"üìä –¢–µ–∫—É—â–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–µ–∞–∫—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {current_default_prob}%\n\n"
                        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–æ—Ç 1 –¥–æ 100):")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–æ–≤–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
@dp.message_handler(state=Form.set_default_probability)
async def process_set_default_probability(message: types.Message, state: FSMContext):
    try:
        new_default_prob = int(message.text.strip())
        if new_default_prob < 1 or new_default_prob > 100:
            await message.answer("‚ö†Ô∏è –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 100 –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return
        
        data = load_data()
        data["default_probability"] = new_default_prob
        save_data(data)
        
        await message.answer(f"‚úÖ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–µ–∞–∫—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {new_default_prob}%")
        await state.finish()
    except ValueError:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add_admin
@dp.message_handler(commands=["add_admin"])
async def cmd_add_admin(message: types.Message):
    if not is_admin(message):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    await Form.add_admin.set()
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (username) –±–µ–∑ —Å–∏–º–≤–æ–ª–∞ @, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@dp.message_handler(state=Form.add_admin)
async def process_add_admin(message: types.Message, state: FSMContext):
    admin_username = message.text.strip()
    
    # –£–¥–∞–ª—è–µ–º —Å–∏–º–≤–æ–ª @ –≤ –Ω–∞—á–∞–ª–µ, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if admin_username.startswith('@'):
        admin_username = admin_username[1:]
    
    data = load_data()
    if admin_username in data["admins"]:
        await message.answer(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{admin_username} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    else:
        data["admins"].append(admin_username)
        save_data(data)
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{admin_username} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
    
    await state.finish()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reload_admins
@dp.message_handler(commands=["reload_admins"])
async def cmd_reload_admins(message: types.Message):
    if not is_admin(message):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    try:
        admins_from_file = load_admins()
        if not admins_from_file:
            await message.answer("‚ö†Ô∏è –§–∞–π–ª —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            return
            
        await message.answer(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(admins_from_file)} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞.")
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler(content_types=types.ContentType.TEXT)
async def check_keywords(message: types.Message):
    data = load_data()
    message_text = message.text.lower()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    for keyword, info in data["keywords"].items():
        if keyword.lower() in message_text:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏—é –∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
            if isinstance(info, dict):
                reaction = info.get("reaction", data.get("default_reaction", DEFAULT_REACTION))
                probability = info.get("probability", data.get("default_probability", 100))
            else:
                # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º
                reaction = info
                probability = data.get("default_probability", 100)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–ª–∂–µ–Ω –ª–∏ –±–æ—Ç –æ—Ç—Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
            if random.randint(1, 100) <= probability:
                await message.reply(reaction)
            
            return  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
    
    # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –∫–∞–∂–¥–æ–µ,
    # –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å return –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)